image: ubuntu:focal

stages:
  - test
  - deploy
  - release

variables:
  NUM_COLLECT_VERSION: "0.5.0"
  CONAN_USER: "MusicScience37+numerical-collection-cpp"
  DOCS_PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/numerical-collection-cpp-doc"
  SECURE_LOG_LEVEL: debug

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
dependency_scanning:
  needs: []
sast:
  needs: []
license_scanning:
  needs: []

.retry setting:
  retry: 1

line count:
  extends: .retry setting
  stage: test
  needs: []
  image: registry.gitlab.com/musicscience37/cloc-docker
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=extern,line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
    - cloc ./
      --exclude-dir=extern,line_count,bench,cmake,doc,example,scripts,test
      --force-lang=C++,h
      --json --out=line_count/src_line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "1 mos"

complexity:
  extends: .retry setting
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang14
  script:
    - mkdir -p .venv
    - pipenv sync --dev
    - pipenv clean
    - mkdir -p complexity
    - pipenv run lizard -o complexity/complexity_per_function.html include
    - pipenv run lizard -o complexity/result.txt -E duplicate include
  cache:
    key: cache-${CI_JOB_NAME}
    paths:
      - .venv
  artifacts:
    paths:
      - complexity
    expire_in: "1 mos"

pre-commit:
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang14
  script:
    - mkdir -p .venv
    - pipenv sync --dev
    - pipenv clean
    - pipenv run pip install certifi
    - pipenv run pre-commit run --all-files
  cache:
    key: cache-${CI_JOB_NAME}
    paths:
      - .venv

.release-test-base:
  extends: .retry setting
  stage: test
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    CCACHE_DIR: ${CI_PROJECT_DIR}/.cache
    CCACHE_COMPILERCHECK: content
    CONAN_USER_HOME: ${CI_PROJECT_DIR}
    CONAN_STD_CPP_LIB: "libstdc++11"
    CMAKE_BUILD_TYPE: Release
  before_script:
    - mkdir -p .venv
    - pipenv sync --dev
    - pipenv clean
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --force --detect default
    - pipenv run conan profile update settings.compiler.libcxx=${CONAN_STD_CPP_LIB} default
    - pipenv run conan remote add -f gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -s build_type=${CMAKE_BUILD_TYPE} -o num_collect:requirements_for_tests=True ..
    - cd ../
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_UNIT_TESTS=ON
      -DNUM_COLLECT_ENABLE_INTEG_TESTS=ON
      -DNUM_COLLECT_ENABLE_BENCH=OFF
      -DNUM_COLLECT_TEST_BENCHMARKS=OFF
      -DNUM_COLLECT_BUILD_EXAMPLES=OFF
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V
  cache:
    key: cache-${CI_JOB_NAME}
    paths:
      - .cache
      - .conan
      - .venv
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - "*.png"
      - "*.html"
      - test # For outputs of ApprovalTest.
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"

.bench-base:
  extends: .release-test-base
  variables:
    CMAKE_BUILD_TYPE: Release
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_UNIT_TESTS=OFF
      -DNUM_COLLECT_ENABLE_INTEG_TESTS=OFF
      -DNUM_COLLECT_ENABLE_BENCH=ON
      -DNUM_COLLECT_TEST_BENCHMARKS=ON
      -DNUM_COLLECT_BUILD_EXAMPLES=ON
      -DNUM_COLLECT_TEST_EXAMPLES=ON
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

static analysis:
  extends: .release-test-base
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang14
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_DIR: build_static_analysis
    CONAN_STD_CPP_LIB: "libc++"
    CMAKE_BUILD_TYPE: Debug
  script:
    - cmake -S ./ -B ${BUILD_DIR}
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_BENCH=ON
      -DNUM_COLLECT_BUILD_EXAMPLES=ON
      -DNUM_COLLECT_ENABLE_CPP_WARNINGS:BOOL=ON
    - pipenv run clang-tidy-checker -b ${BUILD_DIR}

clang coverage:
  extends: .release-test-base
  image: musicscience37/clang-ci:clang14
  variables:
    BUILD_DIR: build_clang_coverage
    CONAN_STD_CPP_LIB: "libc++"
    CMAKE_BUILD_TYPE: Debug
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - cd $BUILD_DIR
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - pipenv run lcov_cobertura $BUILD_DIR/coverage/coverage --output $BUILD_DIR/coverage.xml
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
  coverage: '/[^\s]+%\s+\d+\s+\d+\s+\s[^\s]+%/'
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $BUILD_DIR/coverage.xml
    when: always
    expire_in: "1 mos"

gcc-10-debug:
  extends: .release-test-base
  image: musicscience37/gcc-ci:gcc10
  variables:
    BUILD_DIR: build_gcc10_debug
    CONAN_STD_CPP_LIB: "libstdc++11"
    CMAKE_BUILD_TYPE: Debug

gcc-10-release:
  extends: .release-test-base
  image: musicscience37/gcc-ci:gcc10
  variables:
    BUILD_DIR: build_gcc10_release
    CONAN_STD_CPP_LIB: "libstdc++11"
    CMAKE_BUILD_TYPE: Release

gcc-10-bench:
  extends: .bench-base
  image: musicscience37/gcc-ci:gcc10
  variables:
    BUILD_DIR: build_gcc10_bench
    CONAN_STD_CPP_LIB: "libstdc++11"
    CMAKE_BUILD_TYPE: Release

gcc-12-debug:
  extends: .release-test-base
  image: musicscience37/gcc-ci:gcc12
  variables:
    BUILD_DIR: build_gcc12_debug
    CONAN_STD_CPP_LIB: "libstdc++11"
    CMAKE_BUILD_TYPE: Debug

gcc-12-release:
  extends: .release-test-base
  image: musicscience37/gcc-ci:gcc12
  variables:
    BUILD_DIR: build_gcc12_release
    CONAN_STD_CPP_LIB: "libstdc++11"
    CMAKE_BUILD_TYPE: Release

gcc-12-bench:
  extends: .bench-base
  image: musicscience37/gcc-ci:gcc12
  variables:
    BUILD_DIR: build_gcc12_bench
    CONAN_STD_CPP_LIB: "libstdc++11"
    CMAKE_BUILD_TYPE: Release

clang-14-debug:
  extends: .release-test-base
  image: musicscience37/clang-ci:clang14
  variables:
    BUILD_DIR: build_clang14_debug
    CONAN_STD_CPP_LIB: "libc++"
    CMAKE_BUILD_TYPE: Debug

clang-14-release:
  extends: .release-test-base
  image: musicscience37/clang-ci:clang14
  variables:
    BUILD_DIR: build_clang14_release
    CONAN_STD_CPP_LIB: "libc++"
    CMAKE_BUILD_TYPE: Release

clang-14-bench:
  extends: .bench-base
  image: musicscience37/clang-ci:clang14
  variables:
    BUILD_DIR: build_clang14_bench
    CONAN_STD_CPP_LIB: "libc++"
    CMAKE_BUILD_TYPE: Release

clang-14-asan-ubsan:
  extends: .release-test-base
  image: musicscience37/clang-ci:clang14
  variables:
    BUILD_DIR: build_clang_asan_ubsan
    ASAN_OPTIONS: "alloc_dealloc_mismatch=0"
    CONAN_STD_CPP_LIB: "libc++"
    CMAKE_BUILD_TYPE: Debug
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_AUSAN:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

clang-14-conan:
  extends: .retry setting
  needs: []
  image: musicscience37/clang-ci:clang14
  variables:
    CONAN_CHANNEL: "testing"
  script:
    - mkdir -p .venv
    - pipenv sync --dev
    - pipenv clean
    - pipenv run conan profile new --force --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libc++ default
    - pipenv run conan remote add -f gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan create --build missing --test-folder test/conan_package . ${CONAN_USER}/${CONAN_CHANNEL}

clang-14-conan-release:
  extends: .retry setting
  stage: deploy
  needs: []
  image: musicscience37/clang-ci:clang14
  variables:
    CONAN_CHANNEL: "stable"
  script:
    - mkdir -p .venv
    - pipenv sync --dev
    - pipenv clean
    - pipenv run conan profile new --force --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libc++ default
    - pipenv run conan remote add -f gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan create --build missing --test-folder test/conan_package . ${CONAN_USER}/${CONAN_CHANNEL}
    - CONAN_LOGIN_USERNAME=ci_user CONAN_PASSWORD=${CI_JOB_TOKEN} pipenv run conan upload -r gitlab num_collect/${NUM_COLLECT_VERSION}@${CONAN_USER}/${CONAN_CHANNEL} --all
  only:
    - tags

.msvc-base:
  extends: .release-test-base
  tags:
    - shared-windows
    - windows
    - windows-1809
  stage: test
  needs: []
  dependencies: []
  variables:
    CONAN_USER_HOME: C:\Users\gitlab_runner
  before_script:
    - (mv ${CI_PROJECT_DIR}/.conan C:\Users\gitlab_runner -Force)
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install python --version=3.9.12 -y
    - choco install ccache -y
    - RefreshEnv
    - ccache --version
    - pip install pipenv
    - pipenv sync
    - pipenv clean
  script:
    # Changed in below.
    - ls
  after_script:
    - (mv C:\Users\gitlab_runner\.conan ${CI_PROJECT_DIR} -Force)
  allow_failure: true

# TODO
.msvc-debug:
  extends: .msvc-base
  variables:
    BUILD_DIR: build_msvc_debug
  script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --force --detect default
    - pipenv run conan remote add -f gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o num_collect:requirements_for_tests=True -s build_type=Debug ..
    - cd ../
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_UNIT_TESTS=ON
      -DNUM_COLLECT_ENABLE_INTEG_TESTS=OFF
      -DNUM_COLLECT_ENABLE_BENCH=OFF
      -DNUM_COLLECT_TEST_BENCHMARKS=OFF
      -DNUM_COLLECT_BUILD_EXAMPLES=OFF
      -DNUM_COLLECT_TEST_EXAMPLES=OFF
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
      "-DCMAKE_CXX_FLAGS=/DFMT_USE_NONTYPE_TEMPLATE_PARAMETERS=0"
    - cd $BUILD_DIR
    - cmake --build . --config Debug --parallel 3
    - ctest -V --build-config Debug

# TODO
.msvc-release:
  extends: .msvc-base
  variables:
    BUILD_DIR: build_msvc
  script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --force --detect default
    - pipenv run conan remote add -f gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o num_collect:requirements_for_tests=True -s build_type=Release ..
    - cd ../
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Release
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_UNIT_TESTS=ON
      -DNUM_COLLECT_ENABLE_INTEG_TESTS=OFF
      -DNUM_COLLECT_ENABLE_BENCH=OFF
      -DNUM_COLLECT_TEST_BENCHMARKS=OFF
      -DNUM_COLLECT_BUILD_EXAMPLES=OFF
      -DNUM_COLLECT_TEST_EXAMPLES=OFF
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
      "-DCMAKE_CXX_FLAGS=/DFMT_USE_NONTYPE_TEMPLATE_PARAMETERS=0"
    - cd $BUILD_DIR
    - cmake --build . --config Release --parallel 3
    - ctest -V --build-config Release

doc:
  extends: .release-test-base
  stage: test
  needs: []
  image: musicscience37/sphinx-doxygen:clang14
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    CMAKE_BUILD_TYPE: Release
    BUILD_DIR: build_doc
  script:
    - cmake -S ./ -B build_doc
      -DNUM_COLLECT_BUILD_DOC:BOOL=ON
    - cmake --build build_doc --target num_collect_doc
  artifacts:
    paths:
      - build_doc/doc
    when: always
    expire_in: "3 mos"

pages:
  extends: .retry setting
  stage: deploy
  only:
    - develop
  needs:
    - doc
    - clang coverage
    - line count
    - complexity
  dependencies:
    - doc
    - clang coverage
    - line count
    - complexity
  script:
    - rm -rf public
    - mv build_doc/doc/html public
    - mv build_clang_coverage/coverage/html public/coverage
    - mv line_count public/line_count
    - mv complexity public/complexity
  artifacts:
    paths:
      - public

upload-document:
  stage: deploy
  needs:
    - doc
  dependencies:
    - doc
  image: registry.gitlab.com/musicscience37/my-cpp-env-docker:clang14
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - mv build_doc/doc/html numerical-collection-cpp-doc
    - tar acf numerical-collection-cpp-doc.tar.gz numerical-collection-cpp-doc
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
      --upload-file numerical-collection-cpp-doc.tar.gz \
      ${DOCS_PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/numerical-collection-cpp-doc.tar.gz

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  needs:
    - upload-document
    - clang-14-conan-release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/sphinx/src/release_notes/${CI_COMMIT_TAG}.md"
    assets:
      links:
        - name: "documentation"
          url: "${DOCS_PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/numerical-collection-cpp-doc.tar.gz"
