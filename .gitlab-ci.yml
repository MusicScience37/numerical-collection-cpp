image: ubuntu:focal

stages:
  - test
  - deploy
  - release

variables:
  NUM_COLLECT_VERSION: "0.6.0"
  DOCS_PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/numerical-collection-cpp-doc"
  SECURE_LOG_LEVEL: debug

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
dependency_scanning:
  needs: []
sast:
  needs: []
license_scanning:
  needs: []

.retry setting:
  retry: 1

line count:
  extends: .retry setting
  stage: test
  needs: []
  image: registry.gitlab.com/musicscience37projects/docker/cloc-docker
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=extern,line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
    - cloc ./
      --exclude-dir=extern,line_count,bench,cmake,doc,example,scripts,test
      --force-lang=C++,h
      --json --out=line_count/src_line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "1 mos"
  interruptible: true

complexity:
  extends: .retry setting
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang14
  script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - mkdir -p complexity
    - poetry run lizard -o complexity/complexity_per_function.html include
    - poetry run lizard -o complexity/result.txt -E duplicate include
  cache:
    key:
      prefix: cache-${CI_JOB_NAME}
      files:
        - poetry.lock
    paths:
      - .venv
  artifacts:
    paths:
      - complexity
    expire_in: "1 mos"
  interruptible: true

pre-commit:
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang14
  script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - poetry run pre-commit run --all-files
  cache:
    key:
      prefix: cache-${CI_JOB_NAME}
      files:
        - poetry.lock
    paths:
      - .venv
  interruptible: true

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.h"
      "**/*.cpp"
      "**/*.py"
      "**/*.cmake"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.puml"
      "**/*.bib"
      "**/*.yaml"
      "**/*.json"
      "**/*.sh"
      --exclude "**/*.approved.*"
  interruptible: true

test release:
  stage: test
  needs: []
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10", "gcc12"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CONAN_LIBCXX: libstdc++11
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
  image: ${IMAGE_PATH}:${COMPILER_TYPE}
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_TYPE: Release
    BUILD_DIR: build_${COMPILER_TYPE}_release
    CCACHE_DIR: ${CI_PROJECT_DIR}/.cache
    CCACHE_COMPILERCHECK: content
    CONAN_USER_HOME: ${CI_PROJECT_DIR}
  before_script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - apt-get update
    - apt-get install -y --no-install-recommends curl zip unzip tar
    - ./vcpkg/bootstrap-vcpkg.sh
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_UNIT_TESTS=ON
      -DNUM_COLLECT_ENABLE_INTEG_TESTS=ON
      -DNUM_COLLECT_ENABLE_BENCH=OFF
      -DNUM_COLLECT_TEST_BENCHMARKS=OFF
      -DNUM_COLLECT_BUILD_EXAMPLES=OFF
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - cmake --build .
    - ctest -V
  cache:
    key:
      prefix: cache-${CI_JOB_NAME}
      files:
        - poetry.lock
    paths:
      - .cache
      - .venv
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - "*.png"
      - "*.html"
      - test # For outputs of ApprovalTest.
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"
  interruptible: true

test debug:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10", "gcc12"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CONAN_LIBCXX: libstdc++11
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_${COMPILER_TYPE}_debug

test bench:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10", "gcc12"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CONAN_LIBCXX: libstdc++11
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
  variables:
    BUILD_DIR: build_${COMPILER_TYPE}_bench
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_UNIT_TESTS=OFF
      -DNUM_COLLECT_ENABLE_INTEG_TESTS=OFF
      -DNUM_COLLECT_ENABLE_BENCH=ON
      -DNUM_COLLECT_TEST_BENCHMARKS=ON
      -DNUM_COLLECT_BUILD_EXAMPLES=ON
      -DNUM_COLLECT_TEST_EXAMPLES=ON
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - cmake --build .
    - ctest -V

static analysis:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_static_analysis
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_BENCH=ON
      -DNUM_COLLECT_BUILD_EXAMPLES=ON
      -DNUM_COLLECT_ENABLE_CPP_WARNINGS:BOOL=ON
    - cd ..
    - poetry run clang-tidy-checker -b ${BUILD_DIR}

clang coverage:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_clang_coverage
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=Debug
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - poetry run lcov_cobertura $BUILD_DIR/coverage/coverage --output $BUILD_DIR/coverage.xml
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
  coverage: '/[^\s]+%\s+\d+\s+\d+\s+\s[^\s]+%/'
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $BUILD_DIR/coverage.xml
    when: always
    expire_in: "1 mos"

test asan ubsan:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_clang_asan_ubsan
    ASAN_OPTIONS: "alloc_dealloc_mismatch=0"
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=Debug
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_AUSAN:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
    - cmake --build .
    - ctest -V

# TODO
.test msvc:
  extends: test release
  tags:
    - shared-windows
    - windows
    - windows-1809
  parallel:
    matrix:
      - BUILD_TYPE: ["Debug", "Release"]
  variables:
    BUILD_DIR: build_msvc_${BUILD_TYPE}
    CONAN_USER_HOME: C:\Users\gitlab_runner
  before_script:
    - (mv ${CI_PROJECT_DIR}/.conan C:\Users\gitlab_runner -Force)
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install python --version=3.10.8 -y
    - choco install ccache -y
    - RefreshEnv
    - ccache --version
    - pip install poetry
    - poetry install
  script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - poetry run conan profile new --force --detect default
    - poetry run conan remote add -f cpp-stat-bench $CPP_STAT_BENCH_CONAN_REGISTRY
    - poetry run conan remote add -f cpp-hash-tables $CPP_HASH_TABLES_CONAN_REGISTRY
    - poetry run conan install --build missing -o num_collect:requirements_for_tests=True -s build_type=${BUILD_TYPE} ..
    - cd ../
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DNUM_COLLECT_TESTING:BOOL=ON
      -DNUM_COLLECT_ENABLE_UNIT_TESTS=ON
      -DNUM_COLLECT_ENABLE_INTEG_TESTS=OFF
      -DNUM_COLLECT_ENABLE_BENCH=OFF
      -DNUM_COLLECT_TEST_BENCHMARKS=OFF
      -DNUM_COLLECT_BUILD_EXAMPLES=OFF
      -DNUM_COLLECT_TEST_EXAMPLES=OFF
      -DNUM_COLLECT_WRITE_JUNIT:BOOL=ON
      -DNUM_COLLECT_ENABLE_CCACHE:BOOL=ON
      "-DCMAKE_CXX_FLAGS=/DFMT_USE_NONTYPE_TEMPLATE_PARAMETERS=0"
    - cd $BUILD_DIR
    - cmake --build . --config ${BUILD_TYPE} --parallel 3
    - ctest -V --build-config ${BUILD_TYPE}
  after_script:
    - (mv C:\Users\gitlab_runner\.conan ${CI_PROJECT_DIR} -Force)
  allow_failure: true
  interruptible: true

doc:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/sphinx-doxygen"
        CONAN_LIBCXX: libc++
  variables:
    BUILD_TYPE: Release
    BUILD_DIR: build_doc
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DNUM_COLLECT_BUILD_DOC:BOOL=ON
    - cmake --build . --target num_collect_doc
  artifacts:
    paths:
      - build_doc/doc
    when: always
    expire_in: "1 mos"
  interruptible: true

pages:
  stage: deploy
  only:
    - develop
  needs:
    - "doc: [clang14, musicscience37/sphinx-doxygen, libc++]"
    - "clang coverage: [clang14, musicscience37/clang-ci, libc++]"
    - line count
    - complexity
  dependencies:
    - "doc: [clang14, musicscience37/sphinx-doxygen, libc++]"
    - "clang coverage: [clang14, musicscience37/clang-ci, libc++]"
    - line count
    - complexity
  image: alpine
  script:
    - rm -rf public
    - mv build_doc/doc/html public
    - mv build_clang_coverage/coverage/html public/coverage
    - mv line_count public/line_count
    - mv complexity public/complexity
  artifacts:
    paths:
      - public

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  needs: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/sphinx/src/release_notes/${CI_COMMIT_TAG}.md"
    assets:
      links:
        - name: "documentation"
          url: "${DOCS_PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/numerical-collection-cpp-doc.tar.gz"
